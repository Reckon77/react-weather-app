{"version":3,"sources":["components/weatherBox.js","components/locationBox.js","App.js","serviceWorker.js","index.js"],"names":["weatherBox","props","className","weather","main","temp","locationBox","name","sys","country","dateBuilder","Date","api","App","useEffect","showError","error","code","PERMISSION_DENIED","setError","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERROR","navigator","geolocation","getCurrentPosition","showPosition","alert","position","console","log","coords","lat","latitude","lon","longitude","getWeather","fetch","then","res","json","result","setWeather","setQuery","message","err","catch","e","JSON","stringify","useState","query","type","placeholder","onChange","target","value","onKeyPress","evt","key","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d231cc89.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst weatherBox = (props) => {\r\n  return (\r\n    <div className=\"weather-box\">\r\n      <div className=\"temp\">{props.weather.main.temp}Â°C</div>\r\n      <div className=\"weather\">{props.weather.weather[0].main}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default weatherBox;\r\n","import React from \"react\";\r\n\r\nconst locationBox = (props) => {\r\n  return (\r\n    <div>\r\n      <div className=\"location-box\">\r\n        <div className=\"location\">\r\n          {props.weather.name}, {props.weather.sys.country}\r\n        </div>\r\n        <div className=\"date\">{props.dateBuilder(new Date())}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default locationBox;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport WeatherBox from \"./components/weatherBox\";\nimport LocationBox from \"./components/locationBox\";\nconst api = {\n  key: \"83a02998ed428c776c1bc1867e25e9c4\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n\nfunction App() {\n  useEffect(() => {\n    const getLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(showPosition, showError);\n      } else {\n        alert(\"Geolocation is not supported by this browser.\");\n      }\n    };\n    function showError(error) {\n      switch (error.code) {\n        case error.PERMISSION_DENIED:\n          setError(\"User denied the request for Geolocation.\");\n          break;\n        case error.POSITION_UNAVAILABLE:\n          setError(\"Location information is unavailable.\");\n          break;\n        case error.TIMEOUT:\n          setError(\"The request to get user location timed out.\");\n          break;\n        case error.UNKNOWN_ERROR:\n          setError(\"An unknown error occurred.\");\n          break;\n      }\n    }\n    getLocation();\n  }, []);\n\n  const showPosition = (position) => {\n    console.log(position.coords);\n    let lat = position.coords.latitude;\n    let lon = position.coords.longitude;\n    getWeather(lat, lon);\n  };\n  const getWeather = (latitude, longitude) => {\n    fetch(\n      `${api.base}weather?lat=${latitude}&lon=${longitude}&units=metric&APPID=${api.key}`\n    )\n      .then((res) => res.json())\n      .then((result) => {\n        setWeather(result);\n        setQuery(\"\");\n        console.log(result);\n        setError(result.message);\n        console.log(err);\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n        let e = JSON.stringify(error);\n        setError(e);\n      });\n  };\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const [err, setError] = useState(\"\");\n  const search = (evt) => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then((res) => res.json())\n        .then((result) => {\n          setWeather(result);\n          setQuery(\"\");\n          console.log(result);\n          setError(result.message);\n          console.log(err);\n        })\n        .catch((error) => {\n          console.error(\"Error:\", error);\n          let e = JSON.stringify(error);\n          setError(e);\n        });\n    }\n  };\n\n  const dateBuilder = (d) => {\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    let days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`;\n  };\n  return (\n    <div\n      className={\n        typeof weather.main != \"undefined\"\n          ? weather.main.temp > 16\n            ? \"App warm\"\n            : \"App\"\n          : \"App\"\n      }\n    >\n      <main>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search city name...\"\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n        {typeof weather.main != \"undefined\" ? (\n          <div>\n            <LocationBox weather={weather} dateBuilder={dateBuilder} />\n            <WeatherBox weather={weather} />\n          </div>\n        ) : err !== \"\" ? (\n          <div className=\"error\">Sorry,{err}</div>\n        ) : (\n          \"\"\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}